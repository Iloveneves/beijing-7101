/*****************************************************************************

File name   : display_treg.h

Description : Display register description for test

COPYRIGHT (C) ST-Microelectronics 1999.

Date        Modification              		Name
----        ------------       	     		----
06-Sep-99   Created            	            	FC
29-Feb-00   Added PSI bypass	        	FC
27-Avr-01   Define as static array              XD
*****************************************************************************/

#ifndef __DISPLAY_TREG_H
#define __DISPLAY_TREG_H

/* Includes --------------------------------------------------------------- */

#include "dumpreg.h"
#include "display_reg.h"

#ifdef __cplusplus
extern "C" {
#endif

/* Exported Types --------------------------------------------------------- */

/* Exported Constants ----------------------------------------------------- */

/* Registers description */
static  const Register_t DisplayReg[] =
{
/* Main Display */
    {"DIS_XCFG1",			/* Multi-display configuration for picture 1 */
	 DIS,
	 DIS_XCFG1,
	 0x0000007f,
	 0x0000007f,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_XDOFF1",			/* Multi-display X offset for picture 1 (in MB) */
	 DIS,
	 DIS_XDOFF1,
	 0x000000ff,
	 0x000000ff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_YDOFF1",			/* Multi-display Y offset for picture 1 (in MB) */
	 DIS,
	 DIS_YDOFF1,
	 0x0000007f,
	 0x0000007f,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_XCFG2",			/* Multi-display configuration for picture 2 */
	 DIS,
	 DIS_XCFG2,
	 0x0000007f,
	 0x0000007f,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_XDOFF2",			/* Multi-display X offset for picture 2 (in MB) */
	 DIS,
	 DIS_XDOFF2,
	 0x000000ff,
	 0x000000ff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_YDOFF2",			/* Multi-display Y offset for picture 2 (in MB) */
	 DIS,
	 DIS_YDOFF2,
	 0x0000007f,
	 0x0000007f,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_XCFG3",			/* Multi-display configuration for picture 3 */
	 DIS,
	 DIS_XCFG3,
	 0x0000007f,
	 0x0000007f,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_XDOFF3",			/* Multi-display X offset for picture 3 (in MB) */
	 DIS,
	 DIS_XDOFF3,
	 0x000000ff,
	 0x000000ff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_YDOFF3",			/* Multi-display Y offset for picture 3 (in MB) */
	 DIS,
	 DIS_YDOFF3,
	 0x0000007f,
	 0x0000007f,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_XCFG4",			/* Multi-display configuration for picture 4 */
	 DIS,
	 DIS_XCFG4,
	 0x0000007f,
	 0x0000007f,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_XDOFF4",			/* Multi-display X offset for picture 4 (in MB) */
	 DIS,
	 DIS_XDOFF4,
	 0x000000ff,
	 0x000000ff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_YDOFF4",			/* Multi-display Y offset for picture 4 (in MB) */
	 DIS,
	 DIS_YDOFF4,
	 0x0000007f,
	 0x0000007f,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_MXFH",			/* Main display main window total height (in MB) */
	 DIS,
	 DIS_MXFH,
	 0x0000007f,
	 0x0000007f,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_MXFW",			/* Main display main window total width (in MB) */
	 DIS,
	 DIS_MXFW,
	 0x000000ff,
	 0x000000ff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_DMB",				/* Dummy macroblock location for empty spaces */
	 DIS,
	 DIS_DMB,
	 0x03ffff00,
	 0x03ffff00,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_DCMB",			/* Dummy macroblock chroma location */
	 DIS,
	 DIS_DCMB,
	 0x03ffff00,
	 0x03ffff00,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_LMP",				/* LMU luma buffer start pointer */
	 DIS,
	 DIS_LMP,
	 0x03ffff00,
	 0x03ffff00,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_LCMP",			/* LMU chroma buffer start pointer */
	 DIS,
	 DIS_LCMP,
	 0x03ffff00,
	 0x03ffff00,
	 0,
	 REG_32B,
	 0,
	},

/* Main Display Interrupts */
    {"DIS_ITM",			/* Interrupt mask */
	 DIS,
	 DIS_ITM,
	 0x00000fff,
	 0x00000fff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_ITS",			/* Interrupt status */
	 DIS,
	 DIS_ITS,
	 0x00000fff,
	 0x0,
	 0,
	 REG_32B|REG_SPECIAL,					/* Reset on Read */
	 0,
	},
    {"DIS_STA",			/* Status Register */
	 DIS,
	 DIS_STA,
	 0x00000fff,
	 0x0,
	 0,
	 REG_32B,
	 0,
	},

/* Main Display Block to Line */
    {"DIS_BTL_BPL",			/* Blocks per Line */
	 DIS,
	 DIS_BTL_BPL,
	 0x0000007f,
	 0x0000007f,
	 0,
	 REG_32B,
	 0,
	},

/* Main Display Vertical Block Correction */
    {"DIS_VBC_VINP",			/* Vertical Start Position */
	 DIS,
	 DIS_VBC_VINP,
	 0x000007ff,
	 0x000007ff,
	 0,
	 REG_32B,
	 0,
	},

/* Main Display Linear Median Upconverter */
    {"DIS_LMU_CTRL",			/* LMU Control */
	 DIS,
	 DIS_LMU_CTRL,
	 0x7fff7fff,
	 0x7fff7fff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_LMU_AFD",			/* Accumulated Frame Difference */
	 DIS,
	 DIS_LMU_AFD,
	 0x0000ffff,
	 0x0,
	 0,
	 REG_32B,
	 0,
	},

/* Main Display Vertical Format Control */
    {"DIS_VFC_COEFFS",			/* VFC Coeffs */
	 DIS,
	 DIS_VFC_COEFFS,
	 0x0,
	 0x000001ff,
	 0,
	 REG_32B|REG_ARRAY,
	 128,
	},
    {"DIS_VFC_LDELTA1",			/* Line Delta Zone 1 */
	 DIS,
	 DIS_VFC_LDELTA1,
	 0x000001ff,
	 0x000001ff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_VFC_LDELTA2",			/* Line Delta Zone 2 */
	 DIS,
	 DIS_VFC_LDELTA2,
	 0x000001ff,
	 0x000001ff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_VFC_LDELTA4",			/* Line Delta Zone 4 */
	 DIS,
	 DIS_VFC_LDELTA4,
	 0x000001ff,
	 0x000001ff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_VFC_LDELTA5",			/* Line Delta Zone 5 */
	 DIS,
	 DIS_VFC_LDELTA5,
	 0x000001ff,
	 0x000001ff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_VFC_VZONE1",			/* End of Vertical Zone 1 */
	 DIS,
	 DIS_VFC_VZONE1,
	 0x000007ff,
	 0x000007ff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_VFC_VZONE2",			/* End of Vertical Zone 2 */
	 DIS,
	 DIS_VFC_VZONE2,
	 0x000007ff,
	 0x000007ff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_VFC_VZONE3",			/* End of Vertical Zone 3 */
	 DIS,
	 DIS_VFC_VZONE3,
	 0x000007ff,
	 0x000007ff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_VFC_VZONE4",			/* End of Vertical Zone 4 */
	 DIS,
	 DIS_VFC_VZONE4,
	 0x000007ff,
	 0x000007ff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_VFC_VZONE5",			/* End of Vertical Zone 5 */
	 DIS,
	 DIS_VFC_VZONE5,
	 0x000007ff,
	 0x000007ff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_VFC_LSTEP",			/* Distance from 1st to 2nd progressive line */
	 DIS,
	 DIS_VFC_LSTEP,
	 0x0000ffff,
	 0x0000ffff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_VFC_LSTEP_INIT",			/* Sub-Line scanning from VINP position */
	 DIS,
	 DIS_VFC_LSTEP_INIT,
	 0x00007fff,
	 0x00007fff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_VFC_VINL",			/* Nbr of progressive luma VFC input lines */
	 DIS,
	 DIS_VFC_VINL,
	 0x000007ff,
	 0x000007ff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_VFC_HINP",			/* Horizontal start position of VFC output line */
	 DIS,
	 DIS_VFC_HINP,
	 0x000007ff,
	 0x000007ff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_VFC_HSINL",			/* Horizontal size of stored image */
	 DIS,
	 DIS_VFC_HSINL,
	 0x000007ff,
	 0x000007ff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_VFC_IID",			/* Input image type */
	 DIS,
	 DIS_VFC_IID,
	 0x00000003,
	 0x00000003,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_VFC_THRU",			/* Vertical bypass */
	 DIS,
	 DIS_VFC_THRU,
	 0x00000003,
	 0x00000003,
	 0,
	 REG_32B,
	 0,
	},

/* Main Display Horizontal Format Control */
    {"DIS_HFC_LCOEFFS",			/* HFC Luma coeffs */
	 DIS,
	 DIS_HFC_LCOEFFS,
	 0x0,
	 0x000001ff,
	 0,
	 REG_32B|REG_ARRAY,
	 256,
	},
    {"DIS_HFC_CCOEFFS",			/* HFC Chroma coeffs */
	 DIS,
	 DIS_HFC_CCOEFFS,
	 0x0,
	 0x000001ff,
	 0,
	 REG_32B|REG_ARRAY,
	 128,
	},
    {"DIS_HFC_YHINL",			/* Pixel nbr of VFC luma output line */
	 DIS,
	 DIS_HFC_YHINL,
	 0x000007ff,
	 0x000007ff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_HFC_CHINL",			/* Pixel nbr of VFC chroma output line */
	 DIS,
	 DIS_HFC_CHINL,
	 0x000007ff,
	 0x000007ff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_HFC_PDELTA1",			/* PSTEP delta per output pixel Zone 1 */
	 DIS,
	 DIS_HFC_PDELTA1,
	 0x000001ff,
	 0x000001ff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_HFC_PDELTA2",			/* PSTEP delta per output pixel Zone 2 */
	 DIS,
	 DIS_HFC_PDELTA2,
	 0x000001ff,
	 0x000001ff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_HFC_PDELTA4",			/* PSTEP delta per output pixel Zone 4 */
	 DIS,
	 DIS_HFC_PDELTA4,
	 0x000001ff,
	 0x000001ff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_HFC_PDELTA5",			/* PSTEP delta per output pixel Zone 5 */
	 DIS,
	 DIS_HFC_PDELTA5,
	 0x000001ff,
	 0x000001ff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_HFC_HZONE1",			/* End of Horizontal zone 1 */
	 DIS,
	 DIS_HFC_HZONE1,
	 0x000007ff,
	 0x000007ff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_HFC_HZONE2",			/* End of Horizontal zone 2 */
	 DIS,
	 DIS_HFC_HZONE2,
	 0x000007ff,
	 0x000007ff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_HFC_HZONE3",			/* End of Horizontal zone 3 */
	 DIS,
	 DIS_HFC_HZONE3,
	 0x000007ff,
	 0x000007ff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_HFC_HZONE4",			/* End of Horizontal zone 4 */
	 DIS,
	 DIS_HFC_HZONE4,
	 0x000007ff,
	 0x000007ff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_HFC_HZONE5",			/* End of Horizontal zone 5 */
	 DIS,
	 DIS_HFC_HZONE5,
	 0x000007ff,
	 0x000007ff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_HFC_PSTEP",			/* Distance from 1st to 2nd output pixel */
	 DIS,
	 DIS_HFC_PSTEP,
	 0x00007fff,
	 0x00007fff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_HFC_PSTEP_INIT",			/* Sub-pixel panning from HINP position */
	 DIS,
	 DIS_HFC_PSTEP_INIT,
	 0x00000fff,
	 0x00000fff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_HFC_THRU",			/* Horizontal bypass */
	 DIS,
	 DIS_HFC_THRU,
	 0x00000001,
	 0x00000001,
	 0,
	 REG_32B,
	 0,
	},

/* Main Display Edge Replacement */
    {"DIS_ER_CTRL",			/* Gain control */
	 DIS,
	 DIS_ER_CTRL,
	 0x0000003f,
	 0x0000003f,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_ER_DELAY",			/* Operation frequncy range */
	 DIS,
	 DIS_ER_DELAY,
	 0x00000003,
	 0x00000003,
	 0,
	 REG_32B,
	 0,
	},

/* Main Display Peaking */
    {"DIS_PK_COREV",			/* Coring for vertical peaking */
	 DIS,
	 DIS_PK_COREV,
	 0x0000000f,
	 0x0000000f,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_PK_VGAIN",			/* Vertical peaking gain control */
	 DIS,
	 DIS_PK_VGAIN,
	 0x0000003f,
	 0x0000003f,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_PK_FILT",			/* Horizontal peaking filter selection */
	 DIS,
	 DIS_PK_FILT,
	 0x00000007,
	 0x00000007,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_PK_HGAIN",			/* Horizontal peaking gain control */
	 DIS,
	 DIS_PK_HGAIN,
	 0x0000003f,
	 0x0000003f,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_PK_COREH",			/* Coring for horizontal peaking */
	 DIS,
	 DIS_PK_COREH,
	 0x0000000f,
	 0x0000000f,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_PK_SIEN",			/* Si Compensation */
	 DIS,
	 DIS_PK_SIEN,
	 0x00000001,
	 0x00000001,
	 0,
	 REG_32B,
	 0,
	},

/* Main Display Auto-Flesh */
    {"DIS_AF_QWIDTH",			/* Quadrature flesh width control */
	 DIS,
	 DIS_AF_QWIDTH,
	 0x00000003,
	 0x00000003,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_AF_TINT",			/* Tint control */
	 DIS,
	 DIS_AF_TINT,
	 0x0000003f,
	 0x0000003f,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_AF_OFF",			/* Auto flesh on/off */
	 DIS,
	 DIS_AF_OFF,
	 0x0000007f,
	 0x0000007f,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_AF_AXIS",			/* Flesh axis control */
	 DIS,
	 DIS_AF_AXIS,
	 0x00000003,
	 0x00000003,
	 0,
	 REG_32B,
	 0,
	},

/* Main Display Green-Boost */
    {"DIS_GB_OFF",			/* Green boost on/off */
	 DIS,
	 DIS_GB_OFF,
	 0x0000003f,
	 0x0000003f,
	 0,
	 REG_32B,
	 0,
	},

/* Main Display Dynamic Contrast Improvement */
    {"DIS_DCI_COR_MOD",			/* Coring mode */
	 DIS,
	 DIS_DCI_COR_MOD,
	 0x00000001,
	 0x00000001,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_DCI_COR",			/* Coring level */
	 DIS,
	 DIS_DCI_COR,
	 0x0000003f,
	 0x0000003f,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_DCI_FILTER",			/* Low-Pass filter selection */
	 DIS,
	 DIS_DCI_FILTER,
	 0x00000001,
	 0x00000001,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_DCI_ELINE",			/* Last line of the DCI analysis window */
	 DIS,
	 DIS_DCI_ELINE,
	 0x000007ff,
	 0x000007ff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_DCI_GAIN_SEG2_FRC",			/* Frac part of gain for 2nd seg of dual seg xfer function */
	 DIS,
	 DIS_DCI_GAIN_SEG2_FRC,
	 0x00000fff,
	 0x00000fff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_DCI_LSTHR",			/* Light sample threshold */
	 DIS,
	 DIS_DCI_LSTHR,
	 0x000000ff,
	 0x000000ff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_DCI_LSWF",			/* Light sample weighting factor */
	 DIS,
	 DIS_DCI_LSWF,
	 0xf,
	 0xf,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_DCI_DSTHR",			/* Dark sample threshold */
	 DIS,
	 DIS_DCI_DSTHR,
	 0x000000ff,
	 0x000000ff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_DCI_SLINE",			/* 1st line of DCI analysis */
	 DIS,
	 DIS_DCI_SLINE,
	 0x000007ff,
	 0x000007ff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_DCI_SNR_COR",			/* Signal to noise ratio estimation for coring */
	 DIS,
	 DIS_DCI_SNR_COR,
	 0x0000003f,
	 0x0000003f,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_DCI_TF_DPP",			/* Transfer function dynamic pivot point */
	 DIS,
	 DIS_DCI_TF_DPP,
	 0x000003ff,
	 0x000003ff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_DCI_SAT",			/* Saturation control */
	 DIS,
	 DIS_DCI_SAT,
	 0x0000003f,
	 0x0000003f,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_DCI_CSC_ON",			/* Color Saturation Compensation on/off */
	 DIS,
	 DIS_DCI_CSC_ON,
	 0x00000001,
	 0x00000001,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_DCI_DCI_ON",			/* DCI on/off */
	 DIS,
	 DIS_DCI_DCI_ON,
	 0x00000001,
	 0x00000001,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_DCI_FREEZE_ANLY",			/* Freeze analysis on/off */
	 DIS,
	 DIS_DCI_FREEZE_ANLY,
	 0x00000001,
	 0x00000001,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_DCI_DLTHR",			/* Dark level threshold for DSDA */
	 DIS,
	 DIS_DCI_DLTHR,
	 0x000000ff,
	 0x000000ff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_DCI_DYTC",			/* Dark area size for DSDA */
	 DIS,
	 DIS_DCI_DYTC,
	 0x0000003f,
	 0x0000003f,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_DCI_PEAK_SIZE",			/* Peak area size */
	 DIS,
	 DIS_DCI_PEAK_SIZE,
	 0x0000000f,
	 0x0000000f,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_DCI_SENSBS",			/* Sensitivity of DSDA */
	 DIS,
	 DIS_DCI_SENSBS,
	 0x00003fff,
	 0x00003fff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_DCI_SENSWS",			/* Sensitivity of ABA */
	 DIS,
	 DIS_DCI_SENSWS,
	 0x00007fff,
	 0x00007fff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_DCI_EPIXEL",			/* Hor pel position of right edge of DCI analysis window */
	 DIS,
	 DIS_DCI_EPIXEL,
	 0x000007ff,
	 0x000007ff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_DCI_ERR_COMP",			/* Error compensation */
	 DIS,
	 DIS_DCI_ERR_COMP,
	 0x00003fff,
	 0x00003fff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_DCI_GAIN_SEG1_FRC",			/* Frac part of gain for 1st seg of dual seg xfer function */
	 DIS,
	 DIS_DCI_GAIN_SEG1_FRC,
	 0x00000fff,
	 0x00000fff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_DCI_SPIXEL",			/* Hor pel position of left edge of DCI analysis window  */
	 DIS,
	 DIS_DCI_SPIXEL,
	 0x000007ff,
	 0x000007ff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_DCI_PEAK_THR0",			/* Range 0 upper limit for peak detection */
	 DIS,
	 DIS_DCI_PEAK_THR0,
	 0x000000ff,
	 0x000000ff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_DCI_PEAK_THR1",			/* Range 1 upper limit for peak detection */
	 DIS,
	 DIS_DCI_PEAK_THR1,
	 0x000000ff,
	 0x000000ff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_DCI_PEAK_THR2",			/* Range 2 upper limit for peak detection */
	 DIS,
	 DIS_DCI_PEAK_THR2,
	 0x000000ff,
	 0x000000ff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_DCI_PEAK_THR3",			/* Range 3 upper limit for peak detection */
	 DIS,
	 DIS_DCI_PEAK_THR3,
	 0x000000ff,
	 0x000000ff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_DCI_PEAK_THR4",			/* Range 4 upper limit for peak detection */
	 DIS,
	 DIS_DCI_PEAK_THR4,
	 0x000000ff,
	 0x000000ff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_DCI_PEAK_THR5",			/* Range 5 upper limit for peak detection */
	 DIS,
	 DIS_DCI_PEAK_THR5,
	 0x000000ff,
	 0x000000ff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_DCI_PEAK_THR6",			/* Range 6 upper limit for peak detection */
	 DIS,
	 DIS_DCI_PEAK_THR6,
	 0x000000ff,
	 0x000000ff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_DCI_PEAK_THR7",			/* Range 7 upper limit for peak detection */
	 DIS,
	 DIS_DCI_PEAK_THR7,
	 0x000000ff,
	 0x000000ff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_DCI_PEAK_THR8",			/* Range 8 upper limit for peak detection */
	 DIS,
	 DIS_DCI_PEAK_THR8,
	 0x000000ff,
	 0x000000ff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_DCI_PEAK_THR9",			/* Range 9 upper limit for peak detection */
	 DIS,
	 DIS_DCI_PEAK_THR9,
	 0x000000ff,
	 0x000000ff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_DCI_PEAK_THR10",			/* Range 10 upper limit for peak detection */
	 DIS,
	 DIS_DCI_PEAK_THR10,
	 0x000000ff,
	 0x000000ff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_DCI_PEAK_THR11",			/* Range 11 upper limit for peak detection */
	 DIS,
	 DIS_DCI_PEAK_THR11,
	 0x000000ff,
	 0x000000ff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_DCI_PEAK_THR12",			/* Range 12 upper limit for peak detection */
	 DIS,
	 DIS_DCI_PEAK_THR12,
	 0x000000ff,
	 0x000000ff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_DCI_PEAK_THR13",			/* Range 13 upper limit for peak detection */
	 DIS,
	 DIS_DCI_PEAK_THR13,
	 0x000000ff,
	 0x000000ff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_DCI_PEAK_THR14",			/* Range 14 upper limit for peak detection */
	 DIS,
	 DIS_DCI_PEAK_THR14,
	 0x000000ff,
	 0x000000ff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_DCI_PEAK_THR15",			/* Range 15 upper limit for peak detection */
	 DIS,
	 DIS_DCI_PEAK_THR15,
	 0x000000ff,
	 0x000000ff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_DCI_CBCR_PEAK",			/* Output of chroma peak detector */
	 DIS,
	 DIS_DCI_CBCR_PEAK,
	 0x000007ff,
	 0x0,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_DCI_DRKS_DIST",			/* Output of dark sample distribution */
	 DIS,
	 DIS_DCI_DRKS_DIST,
	 0x000fffff,
	 0x0,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_DCI_AVRG_BR",			/* Output of the average brightness analysis */
	 DIS,
	 DIS_DCI_AVRG_BR,
	 0x0003ffff,
	 0x0,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_DCI_PEAK_N",			/* Upper limit control for peak detection algorithm */
	 DIS,
	 DIS_DCI_PEAK_N,
	 0x0000000f,
	 0x0,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_DCI_FR_PEAK0",			/* Counter output for peak detection in range 0 */
	 DIS,
	 DIS_DCI_FR_PEAK0,
	 0x00007fff,
	 0x0,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_DCI_FR_PEAK1",			/* Counter output for peak detection in range 1 */
	 DIS,
	 DIS_DCI_FR_PEAK1,
	 0x00007fff,
	 0x0,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_DCI_FR_PEAK2",			/* Counter output for peak detection in range 2 */
	 DIS,
	 DIS_DCI_FR_PEAK2,
	 0x00007fff,
	 0x0,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_DCI_FR_PEAK3",			/* Counter output for peak detection in range 3 */
	 DIS,
	 DIS_DCI_FR_PEAK3,
	 0x00007fff,
	 0x0,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_DCI_FR_PEAK4",			/* Counter output for peak detection in range 4 */
	 DIS,
	 DIS_DCI_FR_PEAK4,
	 0x00007fff,
	 0x0,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_DCI_FR_PEAK5",			/* Counter output for peak detection in range 5 */
	 DIS,
	 DIS_DCI_FR_PEAK5,
	 0x00007fff,
	 0x0,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_DCI_FR_PEAK6",			/* Counter output for peak detection in range 6 */
	 DIS,
	 DIS_DCI_FR_PEAK6,
	 0x00007fff,
	 0x0,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_DCI_FR_PEAK7",			/* Counter output for peak detection in range 7 */
	 DIS,
	 DIS_DCI_FR_PEAK7,
	 0x00007fff,
	 0x0,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_DCI_FR_PEAK8",			/* Counter output for peak detection in range 8 */
	 DIS,
	 DIS_DCI_FR_PEAK8,
	 0x00007fff,
	 0x0,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_DCI_FR_PEAK9",			/* Counter output for peak detection in range 9 */
	 DIS,
	 DIS_DCI_FR_PEAK9,
	 0x00007fff,
	 0x0,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_DCI_FR_PEAK10",			/* Counter output for peak detection in range 10 */
	 DIS,
	 DIS_DCI_FR_PEAK10,
	 0x00007fff,
	 0x0,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_DCI_FR_PEAK11",			/* Counter output for peak detection in range 11 */
	 DIS,
	 DIS_DCI_FR_PEAK11,
	 0x00007fff,
	 0x0,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_DCI_FR_PEAK12",			/* Counter output for peak detection in range 12 */
	 DIS,
	 DIS_DCI_FR_PEAK12,
	 0x00007fff,
	 0x0,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_DCI_FR_PEAK13",			/* Counter output for peak detection in range 13 */
	 DIS,
	 DIS_DCI_FR_PEAK13,
	 0x00007fff,
	 0x0,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_DCI_FR_PEAK14",			/* Counter output for peak detection in range 14 */
	 DIS,
	 DIS_DCI_FR_PEAK14,
	 0x00007fff,
	 0x0,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_DCI_FR_PEAK15",			/* Counter output for peak detection in range 15 */
	 DIS,
	 DIS_DCI_FR_PEAK15,
	 0x00007fff,
	 0x0,
	 0,
	 REG_32B,
	 0,
	},
    {"DIS_DCI_BYPASS",				/* Enable bypass of PSI process */
	 DIS,
	 DIS_DCI_BYPASS,
	 0x1,
	 0x1,
	 0,
	 REG_32B,
	 0,
	},

/* PIP/Record Display */
    {"DIP_XCFG",			/* PIP Configuration */
	 DIP,
	 DIP_XCFG,
	 0xf,
	 0xf,
	 0,
	 REG_32B,
	 0,
	},

/* PIP/Record Display Interrupts */
    {"DIP_ITM",			/* Interrupt mask */
	 DIP,
	 DIP_ITM,
	 0x00000007,
	 0x00000007,
	 0,
	 REG_32B,
	 0,
	},
    {"DIP_ITS",			/* Interrupt status */
	 DIP,
	 DIP_ITS,
	 0x00000007,
	 0x0,
	 0,
	 REG_32B|REG_SPECIAL,					/* Reset on Read */
	 0,
	},
    {"DIP_STA",			/* Status Register */
	 DIP,
	 DIP_STA,
	 0x00000007,
	 0x0,
	 0,
	 REG_32B,
	 0,
	},

/* PIP/Record Display Interface*/
    {"DIP_IF_YRCC",			/* Luma channel rate control configuration */
	 DIP,
	 DIP_IF_YRCC,
	 0x0000000f,
	 0x0000000f,
	 0,
	 REG_32B,
	 0,
	},
    {"DIP_IF_CRCC",			/* Chroma channel rate control configuration */
	 DIP,
	 DIP_IF_CRCC,
	 0x0000000f,
	 0x0000000f,
	 0,
	 REG_32B,
	 0,
	},
    {"DIP_IF_VINP",			/* Display vertical start position */
	 DIP,
	 DIP_IF_VINP,
	 0x000007ff,
	 0x000007ff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIP_IF_TST_YFDATA",			/* Data test register for the test of the luma FIFO */
	 DIP,
	 DIP_IF_TST_YFDATA,
	 0xffffffff,
	 0xffffffff,
	 0,
	 REG_32B|REG_SPECIAL,
	 0,
	},
    {"DIP_IF_TST_YFCTRL",			/* Control test register for the test of the luma FIFO */
	 DIP,
	 DIP_IF_TST_YFCTRL,
	 0x00000007,
	 0x00000007,
	 0,
	 REG_32B,
	 0,
	},
    {"DIP_IF_TST_CFDATA",			/* Data test register for the test of the chroma FIFO */
	 DIP,
	 DIP_IF_TST_CFDATA,
	 0xffffffff,
	 0xffffffff,
	 0,
	 REG_32B|REG_SPECIAL,
	 0,
	},
    {"DIP_IF_TST_CFCTRL",			/* Control test register for the test of the chroma FIFO */
	 DIP,
	 DIP_IF_TST_CFCTRL,
	 0x00000007,
	 0x00000007,
	 0,
	 REG_32B,
	 0,
	},

/* PIP/Record Display Horizontal Format Control */
    {"DIP_HFC_LCOEFFS",			/* HFC Luma coeffs */
	 DIP,
	 DIP_HFC_LCOEFFS,
	 0x0,
	 0x000001ff,
	 0,
	 REG_32B|REG_ARRAY,
	 256,
	},
    {"DIP_HFC_CCOEFFS",			/* HFC Chroma coeffs */
	 DIP,
	 DIP_HFC_CCOEFFS,
	 0x0,
	 0x000001ff,
	 0,
	 REG_32B|REG_ARRAY,
	 128,
	},
    {"DIP_HFC_YHINL",			/* Pixel nbr of a VFC luma output line */
	 DIP,
	 DIP_HFC_YHINL,
	 0x000007ff,
	 0x000007ff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIP_HFC_CHINL",			/* Pixel nbr of a VFC chroma output line */
	 DIP,
	 DIP_HFC_CHINL,
	 0x000007ff,
	 0x000007ff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIP_HFC_PDELTA1",			/* Delta of PSTEP per ouput pixel in zone 1 */
	 DIP,
	 DIP_HFC_PDELTA1,
	 0x000001ff,
	 0x000001ff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIP_HFC_PDELTA2",			/* Delta of PSTEP per ouput pixel in zone 2 */
	 DIP,
	 DIP_HFC_PDELTA2,
	 0x000001ff,
	 0x000001ff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIP_HFC_PDELTA4",			/* Delta of PSTEP per ouput pixel in zone 4 */
	 DIP,
	 DIP_HFC_PDELTA4,
	 0x000001ff,
	 0x000001ff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIP_HFC_PDELTA5",			/* Delta of PSTEP per ouput pixel in zone 5 */
	 DIP,
	 DIP_HFC_PDELTA5,
	 0x000001ff,
	 0x000001ff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIP_HFC_HZONE1",			/* End of horizontal zone 1 */
	 DIP,
	 DIP_HFC_HZONE1,
	 0x000007ff,
	 0x000007ff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIP_HFC_HZONE2",			/* End of horizontal zone 2 */
	 DIP,
	 DIP_HFC_HZONE2,
	 0x000007ff,
	 0x000007ff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIP_HFC_HZONE3",			/* End of horizontal zone 3 */
	 DIP,
	 DIP_HFC_HZONE3,
	 0x000007ff,
	 0x000007ff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIP_HFC_HZONE4",			/* End of horizontal zone 4 */
	 DIP,
	 DIP_HFC_HZONE4,
	 0x000007ff,
	 0x000007ff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIP_HFC_HZONE5",			/* End of horizontal zone 5 */
	 DIP,
	 DIP_HFC_HZONE5,
	 0x000007ff,
	 0x000007ff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIP_HFC_PSTEP",			/* Distance from 1st to 2nd output pixel */
	 DIP,
	 DIP_HFC_PSTEP,
	 0x00007fff,
	 0x00007fff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIP_HFC_PSTEP_INIT",			/* Subpixel panning from HINP position */
	 DIP,
	 DIP_HFC_PSTEP_INIT,
	 0x00003fff,
	 0x00003fff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIP_HFC_THRU",			/* Horizontal bypass */
	 DIP,
	 DIP_HFC_THRU,
	 0x00000001,
	 0x00000001,
	 0,
	 REG_32B,
	 0,
	},

/* PIP/Record Display Vertical Format Control */
    {"DIP_VFC_COEFFS",			/* VFC Coeffs */
	 DIP,
	 DIP_VFC_COEFFS,
	 0x0,
	 0x000001ff,
	 0,
	 REG_32B|REG_ARRAY,
	 128,
	},
    {"DIP_VFC_LDELTA1",			/* Line Delta Zone 1 */
	 DIP,
	 DIP_VFC_LDELTA1,
	 0x1ff,
	 0x1ff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIP_VFC_LDELTA2",			/* Line Delta Zone 2 */
	 DIP,
	 DIP_VFC_LDELTA2,
	 0x000001ff,
	 0x000001ff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIP_VFC_LDELTA4",			/* Line Delta Zone 4 */
	 DIP,
	 DIP_VFC_LDELTA4,
	 0x000001ff,
	 0x000001ff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIP_VFC_LDELTA5",			/* Line Delta Zone 5 */
	 DIP,
	 DIP_VFC_LDELTA5,
	 0x000001ff,
	 0x000001ff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIP_VFC_VZONE1",			/* End of Vertical Zone 1 */
	 DIP,
	 DIP_VFC_VZONE1,
	 0x000007ff,
	 0x000007ff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIP_VFC_VZONE2",			/* End of Vertical Zone 2 */
	 DIP,
	 DIP_VFC_VZONE2,
	 0x000007ff,
	 0x000007ff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIP_VFC_VZONE3",			/* End of Vertical Zone 3 */
	 DIP,
	 DIP_VFC_VZONE3,
	 0x000007ff,
	 0x000007ff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIP_VFC_VZONE4",			/* End of Vertical Zone 4 */
	 DIP,
	 DIP_VFC_VZONE4,
	 0x000007ff,
	 0x000007ff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIP_VFC_VZONE5",			/* End of Vertical Zone 5 */
	 DIP,
	 DIP_VFC_VZONE5,
	 0x000007ff,
	 0x000007ff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIP_VFC_LSTEP",			/* Distance from 1st to 2nd progressive line */
	 DIP,
	 DIP_VFC_LSTEP,
	 0x0000ffff,
	 0x0000ffff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIP_VFC_LSTEP_INIT",			/* Sub-Line scanning from VINP position */
	 DIP,
	 DIP_VFC_LSTEP_INIT,
	 0x00007fff,
	 0x00007fff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIP_VFC_VINL",			/* Nbr of progressive luma VFC input lines */
	 DIP,
	 DIP_VFC_VINL,
	 0x000007ff,
	 0x000007ff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIP_VFC_HINP",			/* Horizontal start position of VFC output line */
	 DIP,
	 DIP_VFC_HINP,
	 0x000007ff,
	 0x000007ff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIP_VFC_HSINL",			/* Horizontal size of stored image */
	 DIP,
	 DIP_VFC_HSINL,
	 0x000007ff,
	 0x000007ff,
	 0,
	 REG_32B,
	 0,
	},
    {"DIP_VFC_IID",			/* Input image type */
	 DIP,
	 DIP_VFC_IID,
	 0x00000003,
	 0x00000003,
	 0,
	 REG_32B,
	 0,
	},
    {"DIP_VFC_THRU",			/* Vertical bypass */
	 DIP,
	 DIP_VFC_THRU,
	 0x00000003,
	 0x00000003,
	 0,
	 REG_32B,
	 0,
	},

/* PIP/Record Display Tint & Saturation */
    {"DIP_TS_TINT",			/* Tint control */
	 DIP,
	 DIP_TS_TINT,
	 0x0000003f,
	 0x0000003f,
	 0,
	 REG_32B,
	 0,
	},
    {"DIP_TS_SAT",			/* Saturation control */
	 DIP,
	 DIP_TS_SAT ,
	 0x0000003f,
	 0x0000003f,
	 0,
	 REG_32B,
	 0,
	},
    {"DIP_TS_PK_DET_OUT",			/* Frame wise chroma peak detector */
	 DIP,
	 DIP_TS_PK_DET_OUT,
	 0xff,
	 0x0,
	 0,
	 REG_32B,
	 0,
	},
    {"DIP_TS_BYPASS",			/* Tint & Sat bypass */
	 DIP,
	 DIP_TS_BYPASS,
	 0x00000001,
	 0x00000001,
	 0,
	 REG_32B,
	 0,
	},

};

/* Nbr of registers */
#define DISPLAY_REGISTERS (sizeof(DisplayReg)/sizeof(Register_t))



#ifdef __cplusplus
}
#endif

#endif /* __DISPLAY_TREG_H */
/* ------------------------------- End of file ---------------------------- */


