DVD_MAKE_VERSION := 2
ifdef IN_OBJECT_DIR

include $(DVD_MAKE)/generic.mak

ST20_IMPORTS := stos
ST40_IMPORTS := $(ST20_IMPORTS)
ST200_IMPORTS := $(ST20_IMPORTS)

ST20_TARGETS := stfdma.lib
ST40_TARGETS := $(call ST20LIB_TO_ST40LIB,$(ST20_TARGETS))
ST200_TARGETS := $(call ST20LIB_TO_ST200LIB,$(ST20_TARGETS))

ifdef STFDMA_LEGACY_CODE
      FDMA_CFLAGS := $(FDMA_CFLAGS) -DSTFDMA_LEGACY_CODE
endif

ifdef STFDMA_NO_PARAMETER_CHECK
      FDMA_CFLAGS := $(FDMA_CFLAGS) -DSTFDMA_NO_PARAMETER_CHECK
endif

ifdef STSFDMA_NO_USAGE_CHECK
      FDMA_CFLAGS := $(FDMA_CFLAGS) -DSTFDMA_NO_USAGE_CHECK
endif

ifdef STFDMA_DEBUG_SUPPORT
      FDMA_CFLAGS := $(FDMA_CFLAGS) -DSTFDMA_DEBUG_SUPPORT
endif


ifdef STFDMA_TTS_SUPPORT
      FDMA_CFLAGS := $(FDMA_CFLAGS) -DSTFDMA_TTS_SUPPORT
endif

ifdef STFDMA_TKDMA_LOAD
      FDMA_CFLAGS := $(FDMA_CFLAGS) -DSTFDMA_TKDMA_LOAD
endif

ifdef STFDMA_USE_VIRTUAL_CONTEXT
	FDMA_CFLAGS := $(FDMA_CFLAGS) -DSTFDMA_USE_VIRTUAL_CONTEXT
endif

ifdef STFDMA_DISABLE_PES_PACKET_LENGTH_PARSING
      FDMA_CFLAGS := $(FDMA_CFLAGS) -DSTFDMA_DISABLE_PES_PACKET_LENGTH_PARSING
endif

ifdef STFDMA_H264_I_SLICE_ENABLE
      FDMA_CFLAGS := $(FDMA_CFLAGS) -DSTFDMA_H264_I_SLICE_ENABLE
endif

ifdef STFDMA_NAND_SUPPORT
      FDMA_CFLAGS := $(FDMA_CFLAGS) -DSTFDMA_NAND_SUPPORT
endif

ifeq "$(STAPIREF_COMPAT)" "1"
      FDMA_CFLAGS := $(FDMA_CFLAGS) -DSTAPIREF_COMPAT
endif

ifdef ST_498
      FDMA_CFLAGS := $(FDMA_CFLAGS) -DST_498
endif
ifdef STFDMA_MPX_SUPPORT
      FDMA_CFLAGS := $(FDMA_CFLAGS) -DSTFDMA_MPX_SUPPORT
endif
ifdef STFDMA_MPX_ECM_FDMA_BASE_ADDR
      FDMA_CFLAGS := $(FDMA_CFLAGS) -DSTFDMA_MPX_ECM_FDMA_BASE_ADDR=$(STFDMA_MPX_ECM_FDMA_BASE_ADDR)
endif
ifdef STFDMA_MPX_ESTB_BASE_VADDR
      FDMA_CFLAGS := $(FDMA_CFLAGS) -DSTFDMA_MPX_ESTB_BASE_VADDR=$(STFDMA_MPX_ESTB_BASE_VADDR)
endif
ifdef STFDMA_MPX_ECM_BASE_PADDR
      FDMA_CFLAGS := $(FDMA_CFLAGS) -DSTFDMA_MPX_ECM_BASE_PADDR=$(STFDMA_MPX_ECM_BASE_PADDR)
endif
ifdef STFDMA_MPX_ECM_BASE_VADDR
      FDMA_CFLAGS := $(FDMA_CFLAGS) -DSTFDMA_MPX_ECM_BASE_VADDR=$(STFDMA_MPX_ECM_BASE_VADDR)
endif
ifdef STFDMA_MPX_ESTB_BASE_PADDR
      FDMA_CFLAGS := $(FDMA_CFLAGS) -DSTFDMA_MPX_ESTB_BASE_PADDR=$(STFDMA_MPX_ESTB_BASE_PADDR)
endif
ifdef STFDMA_MPX_ECM_SHARED_INT_STATUS
      FDMA_CFLAGS := $(FDMA_CFLAGS) -DSTFDMA_MPX_ECM_SHARED_INT_STATUS=$(STFDMA_MPX_ECM_SHARED_INT_STATUS)
endif
ifdef STFDMA_MPX_ECM_PIO_PORT
      FDMA_CFLAGS := $(FDMA_CFLAGS) -DSTFDMA_MPX_ECM_PIO_PORT=$(STFDMA_MPX_ECM_PIO_PORT)
endif
ifdef STFDMA_MPX_ECM_PIO_BIT
      FDMA_CFLAGS := $(FDMA_CFLAGS) -DSTFDMA_MPX_ECM_PIO_BIT=$(STFDMA_MPX_ECM_PIO_BIT)
endif
ifdef STFDMA_MPX_USE_EXT_IRQ3
      FDMA_CFLAGS := $(FDMA_CFLAGS) -DSTFDMA_MPX_USE_EXT_IRQ3
endif
ifdef STFDMA_MPX_ESTB_PIO_NAME
      FDMA_CFLAGS := $(FDMA_CFLAGS) -DSTFDMA_MPX_ESTB_PIO_NAME=\"$(STFDMA_MPX_ESTB_PIO_NAME)\"
endif
ifdef STFDMA_MPX_ESTB_PIO_PORT
      FDMA_CFLAGS := $(FDMA_CFLAGS) -DSTFDMA_MPX_ESTB_PIO_PORT=$(STFDMA_MPX_ESTB_PIO_PORT)
endif
ifdef STFDMA_MPX_ESTB_PIO_BIT
      FDMA_CFLAGS := $(FDMA_CFLAGS) -DSTFDMA_MPX_ESTB_PIO_BIT=$(STFDMA_MPX_ESTB_PIO_BIT)
endif
ifdef STFDMA_MPX_ECM_PIO_0_BASE
      FDMA_CFLAGS := $(FDMA_CFLAGS) -DSTFDMA_MPX_ECM_PIO_0_BASE=$(STFDMA_MPX_ECM_PIO_0_BASE)
endif
ifdef STFDMA_MPX_ECM_PIO_1_BASE
      FDMA_CFLAGS := $(FDMA_CFLAGS) -DSTFDMA_MPX_ECM_PIO_1_BASE=$(STFDMA_MPX_ECM_PIO_1_BASE)
endif
ifdef STFDMA_MPX_ECM_PIO_2_BASE
      FDMA_CFLAGS := $(FDMA_CFLAGS) -DSTFDMA_MPX_ECM_PIO_2_BASE=$(STFDMA_MPX_ECM_PIO_2_BASE)
endif
ifdef STFDMA_MPX_ECM_PIO_3_BASE
      FDMA_CFLAGS := $(FDMA_CFLAGS) -DSTFDMA_MPX_ECM_PIO_3_BASE=$(STFDMA_MPX_ECM_PIO_3_BASE)
endif
ifdef STFDMA_MPX_ECM_PIO_4_BASE
      FDMA_CFLAGS := $(FDMA_CFLAGS) -DSTFDMA_MPX_ECM_PIO_4_BASE=$(STFDMA_MPX_ECM_PIO_4_BASE)
endif
ifdef STFDMA_MPX_ESTB_ILC_BASE
      FDMA_CFLAGS := $(FDMA_CFLAGS) -DSTFDMA_MPX_ESTB_ILC_BASE=$(STFDMA_MPX_ESTB_ILC_BASE)
endif
ifdef STFDMA_MPX_ECM_ILC_BASE
      FDMA_CFLAGS := $(FDMA_CFLAGS) -DSTFDMA_MPX_ECM_ILC_BASE=$(STFDMA_MPX_ECM_ILC_BASE)
endif


ifdef STFDMA_SIM
      INCLUDE_PATH :=$(DVD_BUILD_DIR)/../tests
      FDMA_CFLAGS := $(FDMA_CFLAGS) -DSTFDMA_SIM
endif

ifdef STFDMA_CALLBACK_TASK_STACK_SIZE
FDMA_CFLAGS := $(FDMA_CFLAGS) -DSTFDMA_CALLBACK_TASK_STACK_SIZE=$(STFDMA_CALLBACK_TASK_STACK_SIZE)
endif

CFLAGS := $(CFLAGS) $(OPTIONAL_CFLAGS) $(TESTFLAGS) $(FDMA_CFLAGS)

ifdef STAPI_INTERRUPT_BY_NUMBER
CFLAGS += -DSTAPI_INTERRUPT_BY_NUMBER
endif

ST20_OBJS := stfdma.tco fdma1.tco fdma2.tco fdmareq.tco handler.tco context.tco
ST40_OBJS := $(call ST20OBJ_TO_ST40OBJ,$(ST20_OBJS))
ST200_OBJS := $(call ST20OBJ_TO_ST200OBJ,$(ST20_OBJS))

FDMA_COMPONENT    := $(notdir $(DVD_BUILD_DIR))

PATH_SRC_DIR := $(subst $(GOOD_SLASH)$(FDMA_COMPONENT),,$(DVD_BUILD_DIR))

INCLUDE_PATH += $(PATH_SRC_DIR)

include $(DVD_MAKE)/defrules.mak

stfdma.lib: $(SUBDIR_LIBS) $(ST20_OBJS)
	@$(ECHO) Building $@
	$(BUILD_LIBRARY)

libstfdma.a: $(SUBDIR_LIBS) $(ST40_OBJS)
	@$(ECHO) Building $@
	$(BUILD_LIBRARY)

clean: $(SUBDIR_CLEAN)
	@$(ECHO) Cleaning $($(ARCHITECTURE)_TARGETS)
	-$(RM) $($(ARCHITECTURE)_OBJS)
	-$(RM) $($(ARCHITECTURE)_TARGETS)

stfdma.h: $(DVD_INCLUDE)/stfdma.h

else

include $(DVD_MAKE)/builddir.mak

endif
